@{
    ViewBag.Title = "AddLoyaltyProgram";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    bool flag = false;
}
@model FuelCardSystemEntities.Models.Loyalty_Program
@using FuelCardSystemMVC.Library

@if (Model != null && Model.id > 0)
{
    if (_AppContext.HasPermission(Parameters.Can_Edit_LoyaltyProgram))
    {
        flag = true;
    }
}
else
{
    if (_AppContext.HasPermission(Parameters.Can_Create_LoyaltyProgram))
    {
        flag = true;
    }
}
@if (flag)
{

@*<link href="~/Content/plugins/timepicker/bootstrap-timepicker.min.css" rel="stylesheet" />*@
    <link rel="stylesheet" href="~/Content/plugins/jQueryTimeRange/include/ui-1.10.0/ui-lightness/jquery-ui-1.10.0.custom.min.css" type="text/css" />
    <link rel="stylesheet" href="~/Content/plugins/jQueryTimeRange/jquery.ui.timepicker.css?v=0.3.3" type="text/css" />
@section header{
    <section class="content-header">
        <h1><i class="fa fa-calculator"></i><span class="margin">@(Model != null ? (Model.id > 0 ? "Edit Loyalty Program..." : "Add Loyalty Program...") : "Add Loyalty Program")</span><small></small></h1>
        <ol class="breadcrumb">
            <li><a href="@Url.Action("Index", "Admin")"><i class="fa fa-dashboard"></i>Home</a></li>
            <li><a href="@Url.Action("LoyaltyProgramsList", "Admin")">List of Loyalty Programs</a></li>
            <li class="active">@(Model != null ? (Model.id > 0 ? "Edit Loyalty Program..." : "Add Loyalty Program...") : "Add Loyalty Program")</li>
        </ol>
    </section>
}
<div class="row">
    @if (ViewBag != null)
    {
        if (ViewBag.msg == _AppContext.Messages.Success)
        {
        <div class="col-sm-12">
            <div class="alert alert-success">
                <h4><i class="icon fa fa-check"></i>Successfully saved.</h4>
            </div>
        </div>
        }
        if (ViewBag.msg == _AppContext.Messages.Error)
        {
        <div class="col-sm-12">
            <div class="alert alert-danger">
                <h4><i class="icon fa fa-ban"></i>Error occurred.</h4>
            </div>
        </div>
        }
    }
    <div class="col-sm-12">
        <div class="box box-solid box-info">
            <div class="box-header with-border">
                <h3 class="box-title">@(Model != null ? (Model.id > 0 ? "Edit Loyalty Program..." : "Add Loyalty Program...") : "Add Loyalty Program")</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
                </div>@* /.box-tools *@
            </div>@* /.box-header *@
            <div class="overlay" style="display: none">
                <i class="fa fa-refresh fa-spin"></i>
            </div>
            @* form start *@
            @using (Html.BeginForm("AddLoyaltyProgram", "Admin", FormMethod.Post, new { @id = "AddLoyaltyProgramForm", @role = "form" }))
            {
                <div class="box-body">
                    <div class="form-group">
                        <label for="">Loyalty Program Name</label>
                        @Html.TextBoxFor(x => x.Loyalty_Program_Name, new { @placeholder = "Loyalty Program Name", @class = "form-control", @maxlength = 50 })
                    </div>
                    <div class="" id="loading" style="display: none; position: absolute; top: 85px;">
                        <i class="fa fa-refresh fa-spin"></i>
                    </div>
                    <div class="row">
                        <div class="col-xs-4">
                            <div class="form-group">
                                <label for="">Time Period</label>
                                @Html.DropDownListFor(x => x.time_period, (SelectList)ViewBag.TimePeriod, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-xs-4">
                            <div class="form-group">
                                <label>Period Type</label>
                                @Html.DropDownListFor(x => x.period_type, (SelectList)ViewBag.PeriodType, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-xs-4">
                            <div class="form-group">
                                <label>Day</label>
                                @Html.DropDownListFor(x => x.day, (SelectList)ViewBag.Day, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
@*                        <div class="col-xs-6">
                            <div class="form-group">
                                <label for="">Communication Template</label>
                                @Html.DropDownListFor(x => x.commprotocol_id, (SelectList)ViewBag.Templates, new { @class = "form-control", @onchange = "javascript:GetChannels(this.value);" })
                            </div>
                        </div>*@
                        <div class="col-xs-4">
                            <div class="form-group">
                                <label for="">Formula</label>
                                @Html.DropDownListFor(x => x.tierrule_id, (SelectList)ViewBag.formula, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-xs-4">
                            <div class="form-group">
                                <label>Reward Action</label>
                                @Html.DropDownListFor(x => x.action_id, (SelectList)ViewBag.Actions, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-xs-4">
                            <div class="form-group">
                                <label>Filter</label>
                                @Html.DropDownListFor(x => x.tierlevel_id, (SelectList)ViewBag.Classifications, new { @class = "form-control", @onchange = "javascript:GetChannels(this.value);" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-6">
                            <div class="bootstrap-timepicker">
                                <div class="form-group">
                                    <label>Start time</label>
                                    <style>.ui-timepicker-table td a {width:2.2em;}</style>
                                    <div class="input-group">
                                        @Html.TextBoxFor(x => x.start_time, new { @class = "form-control timepicker timepicker_start" })
                                        <div class="input-group-addon">
                                            <i class="fa fa-clock-o"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-6">
                            <div class="bootstrap-timepicker">
                                <div class="form-group">
                                    <label>End time</label>
                                    <div class="input-group">
                                        @Html.TextBoxFor(x => x.end_time, new { @class = "form-control timepicker timepicker_end" })
                                        <div class="input-group-addon">
                                            <i class="fa fa-clock-o"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(x => x.id)
                        <input type="submit" value="Save" class="btn btn-primary col-md-2 col-md-offset-5" onclick="DisableButton(this);" ondblclick="DisableButton(this);">
                    </div>
                    <div class="clearfix"></div>
                </div>@* /.box-body *@
            }
        </div>
    </div>
</div>
@section scripts{

    @*<script type="text/javascript" src="~/Content/plugins/timepicker/bootstrap-timepicker.min.js"></script>*@
   
     <script type="text/javascript" src="~/Content/plugins/jQueryTimeRange/include/ui-1.10.0/jquery.ui.core.min.js"></script>
    <script type="text/javascript" src="~/Content/plugins/jQueryTimeRange/include/ui-1.10.0/jquery.ui.widget.min.js"></script>
    <script type="text/javascript" src="~/Content/plugins/jQueryTimeRange/include/ui-1.10.0/jquery.ui.tabs.min.js"></script>
    <script type="text/javascript" src="~/Content/plugins/jQueryTimeRange/include/ui-1.10.0/jquery.ui.position.min.js"></script>

    <script type="text/javascript" src="~/Content/plugins/jQueryTimeRange/jquery.ui.timepicker.js?v=0.3.3"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            AddLoyaltyProgramFormLoad();
            //Timepicker
            //$(".timepicker").timepicker({
            //    minuteStep: 5,
            //    secondStep: 30,
            //    showInputs: false,
            //    showSeconds: true,
            //    showMeridian: false//,
            //    //defaultTime: true
            //});

            $('.timepicker_start').timepicker({
                showLeadingZero: true,
                onSelect: tpStartSelect,
                maxTime: {
                    hour: 23, minute: 0
                }
            });
            $('.timepicker_end').timepicker({
                showLeadingZero: true,
                onSelect: tpEndSelect,
                minTime: {
                    hour: 0, minute: 0
                }
            });
            $("#manageLtyProg").closest("li.treeview").addClass("active");
            $("#idLoyaltyProgram").closest("li").addClass("active");
            $(".alert").delay(2000).fadeOut(1000);
        });
        // when start time change, update minimum for end timepicker
        function tpStartSelect(time, endTimePickerInst) {
            $('.timepicker_end').timepicker('option', {
                minTime: {
                    hour: endTimePickerInst.hours,
                    minute: endTimePickerInst.minutes
                }
            });
        }

        // when end time change, update maximum for start timepicker
        function tpEndSelect(time, startTimePickerInst) {
            $('.timepicker_start').timepicker('option', {
                maxTime: {
                    hour: startTimePickerInst.hours,
                    minute: startTimePickerInst.minutes
                }
            });
        }
    </script>
}
}
else
{
     <div class="alert alert-danger alert-dismissable">
        <h4><i class="icon fa fa-ban"></i>Unauthorized Access!</h4>
        You have no permission to do this action.    
    </div>
}
